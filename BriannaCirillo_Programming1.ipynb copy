{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YruLnrCRWwuK"
   },
   "source": [
    "# Programming Assignment: Numerical Optimization for Logistic Regression.\n",
    "\n",
    "### Name: Brianna Cirillo\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1JhXtPnBWwuN"
   },
   "source": [
    "## 0. You will do the following:\n",
    "\n",
    "1. Read the lecture note: [click here](https://github.com/wangshusen/DeepLearning/blob/master/LectureNotes/Logistic/paper/logistic.pdf)\n",
    "\n",
    "2. Read, complete, and run my code.\n",
    "\n",
    "3. **Implement mini-batch SGD** and evaluate the performance.\n",
    "\n",
    "4. Convert the .IPYNB file to .HTML file.\n",
    "\n",
    "    * The HTML file must contain **the code** and **the output after execution**.\n",
    "    \n",
    "    * Missing **the output after execution** will not be graded.\n",
    "    \n",
    "    \n",
    "5. Upload this .HTML file to your Google Drive, Dropbox, or your Github repo.  (If you submit the file to Google Drive or Dropbox, you must make the file \"open-access\". The delay caused by \"deny of access\" may result in late penalty.)\n",
    "\n",
    "6. On Canvas, submit the Google Drive/Dropbox/Github link to the HTML file.\n",
    "\n",
    "\n",
    "## Grading criteria:\n",
    "\n",
    "1. When computing the ```gradient``` and ```objective function value``` using a batch of samples, use **matrix-vector multiplication** rather than a FOR LOOP of **vector-vector multiplications**.\n",
    "\n",
    "2. Plot ```objective function value``` against ```epochs```. In the plot, compare GD, SGD, and MB-SGD (with $b=8$ and $b=64$). The plot must look reasonable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "dglBdGFcWwuN"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pQEdnVnFWwuN"
   },
   "source": [
    "# 1. Data processing\n",
    "\n",
    "- Download the Diabete dataset from https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary/diabetes\n",
    "- Load the data using sklearn.\n",
    "- Preprocess the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m95hUbDyWwuO"
   },
   "source": [
    "## 1.1. Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4IO6krGgWwuO",
    "outputId": "b9c7b91d-3b2c-4691-b92b-183786f3c3f9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x: (768, 8)\n",
      "Shape of y: (768,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn import datasets\n",
    "import numpy\n",
    "\n",
    "x_sparse, y = datasets.load_svmlight_file('diabetes')\n",
    "x = x_sparse.todense()\n",
    "\n",
    "print('Shape of x: ' + str(x.shape))\n",
    "print('Shape of y: ' + str(y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "a-ANpamvWwuP"
   },
   "source": [
    "## 1.2. Partition to training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gClV5lj7WwuP",
    "outputId": "d5c07f32-97c1-453f-ac50-3aedf538a8bf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (640, 8)\n",
      "Shape of x_test: (128, 8)\n",
      "Shape of y_train: (640, 1)\n",
      "Shape of y_test: (128, 1)\n"
     ]
    }
   ],
   "source": [
    "# partition the data to training and test sets\n",
    "n = x.shape[0]\n",
    "n_train = 640\n",
    "n_test = n - n_train\n",
    "\n",
    "rand_indices = numpy.random.permutation(n)\n",
    "train_indices = rand_indices[0:n_train]\n",
    "test_indices = rand_indices[n_train:n]\n",
    "\n",
    "x_train = x[train_indices, :]\n",
    "x_test = x[test_indices, :]\n",
    "y_train = y[train_indices].reshape(n_train, 1)\n",
    "y_test = y[test_indices].reshape(n_test, 1)\n",
    "\n",
    "print('Shape of x_train: ' + str(x_train.shape))\n",
    "print('Shape of x_test: ' + str(x_test.shape))\n",
    "print('Shape of y_train: ' + str(y_train.shape))\n",
    "print('Shape of y_test: ' + str(y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rPzsdDfUWwuP"
   },
   "source": [
    "## 1.3. Feature scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4knHoNADWwuP"
   },
   "source": [
    "Use the standardization to trainsform both training and test features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oCa3PoheWwuP",
    "outputId": "e61e050c-f4d9-40f0-b69d-0d3fc87d16ad"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test mean = \n",
      "[[-0.06872298  0.14415222 -0.00695671 -0.06927412 -0.00146751 -0.03292922\n",
      "  -0.00034699 -0.12385011]]\n",
      "test std = \n",
      "[[0.87654745 1.04958276 0.93777344 0.95314212 0.89540022 1.06883252\n",
      "  1.04290592 0.89057496]]\n"
     ]
    }
   ],
   "source": [
    "# Standardization\n",
    "import numpy\n",
    "\n",
    "# calculate mu and sig using the training set\n",
    "d = x_train.shape[1]\n",
    "mu = numpy.mean(x_train, axis=0).reshape(1, d)\n",
    "sig = numpy.std(x_train, axis=0).reshape(1, d)\n",
    "\n",
    "# transform the training features\n",
    "x_train = (x_train - mu) / (sig + 1E-6)\n",
    "\n",
    "# transform the test features\n",
    "x_test = (x_test - mu) / (sig + 1E-6)\n",
    "\n",
    "print('test mean = ')\n",
    "print(numpy.mean(x_test, axis=0))\n",
    "\n",
    "print('test std = ')\n",
    "print(numpy.std(x_test, axis=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uxqfT_GHWwuQ"
   },
   "source": [
    "## 1.4. Add a dimension of all ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_n6hLiKkWwuQ",
    "outputId": "efff67f3-d667-4bc8-fd09-342b65041d6f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train: (640, 9)\n",
      "Shape of x_test: (128, 9)\n"
     ]
    }
   ],
   "source": [
    "n_train, d = x_train.shape\n",
    "x_train = numpy.concatenate((x_train, numpy.ones((n_train, 1))), axis=1)\n",
    "\n",
    "n_test, d = x_test.shape\n",
    "x_test = numpy.concatenate((x_test, numpy.ones((n_test, 1))), axis=1)\n",
    "\n",
    "print('Shape of x_train: ' + str(x_train.shape))\n",
    "print('Shape of x_test: ' + str(x_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8_t3BcyVWwuQ"
   },
   "source": [
    "# 2. Logistic regression model\n",
    "\n",
    "The objective function is $Q (w; X, y) = \\frac{1}{n} \\sum_{i=1}^n \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "uKfyHDjVWwuQ"
   },
   "outputs": [],
   "source": [
    "# Calculate the objective function value\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     objective function value (scalar)\n",
    "def objective(w, x, y, lam):\n",
    "    n, d = x.shape\n",
    "    yx = numpy.multiply(y, x) # n-by-d matrix\n",
    "    yxw = numpy.dot(yx, w) # n-by-1 matrix\n",
    "    vec1 = numpy.exp(-yxw) # n-by-1 matrix\n",
    "    vec2 = numpy.log(1 + vec1) # n-by-1 matrix\n",
    "    loss = numpy.mean(vec2) # scalar\n",
    "    reg = lam / 2 * numpy.sum(w * w) # scalar\n",
    "    return loss + reg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QAPcsYqcWwuQ",
    "outputId": "ef7d9e1f-7f65-488c-ed96-00aa0660b033"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial objective function value = 0.6931471805599453\n"
     ]
    }
   ],
   "source": [
    "# initialize w\n",
    "d = x_train.shape[1]\n",
    "w = numpy.zeros((d, 1))\n",
    "\n",
    "# evaluate the objective function value at w\n",
    "lam = 1E-6\n",
    "objval0 = objective(w, x_train, y_train, lam)\n",
    "print('Initial objective function value = ' + str(objval0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "doToNTSfWwuQ"
   },
   "source": [
    "# 3. Numerical optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wVp9f25JWwuQ"
   },
   "source": [
    "## 3.1. Gradient descent\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8M0_SkJyWwuQ"
   },
   "source": [
    "The gradient at $w$ is $g = - \\frac{1}{n} \\sum_{i=1}^n \\frac{y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "0fElPUK-WwuQ"
   },
   "outputs": [],
   "source": [
    "# Calculate the gradient\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     g: g: d-by-1 matrix, full gradient\n",
    "def gradient(w, x, y, lam):\n",
    "    n, d = x.shape\n",
    "    yx = numpy.multiply(y, x) # n-by-d matrix\n",
    "    yxw = numpy.dot(yx, w) # n-by-1 matrix\n",
    "    vec1 = numpy.exp(yxw) # n-by-1 matrix\n",
    "    vec2 = numpy.divide(yx, 1+vec1) # n-by-d matrix\n",
    "    vec3 = -numpy.mean(vec2, axis=0).reshape(d, 1) # d-by-1 matrix\n",
    "    g = vec3 + lam * w\n",
    "    return g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "LFB4y5aOWwuQ"
   },
   "outputs": [],
   "source": [
    "# Gradient descent for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     stepsize: scalar\n",
    "#     max_iter: integer, the maximal iterations\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: d-by-1 matrix, the solution\n",
    "#     objvals: a record of each iteration's objective value\n",
    "def grad_descent(x, y, lam, stepsize, max_iter=100, w=None):\n",
    "    n, d = x.shape\n",
    "    objvals = numpy.zeros(max_iter) # store the objective values\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1)) # zero initialization\n",
    "\n",
    "    for t in range(max_iter):\n",
    "        objval = objective(w, x, y, lam)\n",
    "        objvals[t] = objval\n",
    "        print('Objective value at t=' + str(t) + ' is ' + str(objval))\n",
    "        g = gradient(w, x, y, lam)\n",
    "        w -= stepsize * g\n",
    "\n",
    "    return w, objvals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G9UObXn_WwuQ"
   },
   "source": [
    "Run gradient descent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vBaXaoFPWwuR",
    "outputId": "0728902b-6ed1-4cc5-a375-4c8a35f93f49"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at t=0 is 0.6931471805599453\n",
      "Objective value at t=1 is 0.5871435766042122\n",
      "Objective value at t=2 is 0.5429666891882295\n",
      "Objective value at t=3 is 0.5187237933785561\n",
      "Objective value at t=4 is 0.5033695815986681\n",
      "Objective value at t=5 is 0.49285489664138254\n",
      "Objective value at t=6 is 0.48529887100363883\n",
      "Objective value at t=7 is 0.4796873834057104\n",
      "Objective value at t=8 is 0.47541778335987783\n",
      "Objective value at t=9 is 0.47210738215758535\n",
      "Objective value at t=10 is 0.4695013479076735\n",
      "Objective value at t=11 is 0.46742380879570317\n",
      "Objective value at t=12 is 0.4657499156841268\n",
      "Objective value at t=13 is 0.46438897031177556\n",
      "Objective value at t=14 is 0.4632737907279818\n",
      "Objective value at t=15 is 0.4623537760912282\n",
      "Objective value at t=16 is 0.46159025582547325\n",
      "Objective value at t=17 is 0.4609532961891269\n",
      "Objective value at t=18 is 0.46041946228149455\n",
      "Objective value at t=19 is 0.4599702211092424\n",
      "Objective value at t=20 is 0.459590783580948\n",
      "Objective value at t=21 is 0.4592692524925844\n",
      "Objective value at t=22 is 0.45899598731818664\n",
      "Objective value at t=23 is 0.4587631248987416\n",
      "Objective value at t=24 is 0.458564213759038\n",
      "Objective value at t=25 is 0.4583939322806362\n",
      "Objective value at t=26 is 0.4582478694751314\n",
      "Objective value at t=27 is 0.458122352989681\n",
      "Objective value at t=28 is 0.4580143131028235\n",
      "Objective value at t=29 is 0.45792117439666197\n",
      "Objective value at t=30 is 0.45784076889391556\n",
      "Objective value at t=31 is 0.45777126597467227\n",
      "Objective value at t=32 is 0.4577111155072824\n",
      "Objective value at t=33 is 0.45765900145710486\n",
      "Objective value at t=34 is 0.4576138038567187\n",
      "Objective value at t=35 is 0.4575745674885839\n",
      "Objective value at t=36 is 0.45754047598641634\n",
      "Objective value at t=37 is 0.45751083033366785\n",
      "Objective value at t=38 is 0.4574850309474728\n",
      "Objective value at t=39 is 0.45746256269953506\n",
      "Objective value at t=40 is 0.4574429823529615\n",
      "Objective value at t=41 is 0.45742590799438176\n",
      "Objective value at t=42 is 0.45741101012008084\n",
      "Objective value at t=43 is 0.457398004098026\n",
      "Objective value at t=44 is 0.4573866437781844\n",
      "Objective value at t=45 is 0.45737671606411345\n",
      "Objective value at t=46 is 0.45736803629158673\n",
      "Objective value at t=47 is 0.457360444286593\n",
      "Objective value at t=48 is 0.45735380099669054\n",
      "Objective value at t=49 is 0.4573479856073973\n",
      "Objective value at t=50 is 0.457342893069821\n",
      "Objective value at t=51 is 0.45733843197769225\n",
      "Objective value at t=52 is 0.45733452274184977\n",
      "Objective value at t=53 is 0.45733109601842453\n",
      "Objective value at t=54 is 0.45732809135378044\n",
      "Objective value at t=55 is 0.4573254560149552\n",
      "Objective value at t=56 is 0.45732314397909885\n",
      "Objective value at t=57 is 0.4573211150593918\n",
      "Objective value at t=58 is 0.457319334148276\n",
      "Objective value at t=59 is 0.4573177705616505\n",
      "Objective value at t=60 is 0.45731639747007563\n",
      "Objective value at t=61 is 0.45731519140503496\n",
      "Objective value at t=62 is 0.4573141318300268\n",
      "Objective value at t=63 is 0.45731320076769727\n",
      "Objective value at t=64 is 0.45731238247547557\n",
      "Objective value at t=65 is 0.4573116631632158\n",
      "Objective value at t=66 is 0.45731103074725715\n",
      "Objective value at t=67 is 0.4573104746360809\n",
      "Objective value at t=68 is 0.45730998554340185\n",
      "Objective value at t=69 is 0.45730955532509776\n",
      "Objective value at t=70 is 0.4573091768368678\n",
      "Objective value at t=71 is 0.4573088438099258\n",
      "Objective value at t=72 is 0.4573085507423956\n",
      "Objective value at t=73 is 0.45730829280438456\n",
      "Objective value at t=74 is 0.45730806575497956\n",
      "Objective value at t=75 is 0.4573078658696411\n",
      "Objective value at t=76 is 0.4573076898766682\n",
      "Objective value at t=77 is 0.45730753490158255\n",
      "Objective value at t=78 is 0.45730739841843\n",
      "Objective value at t=79 is 0.45730727820712264\n",
      "Objective value at t=80 is 0.4573071723160635\n",
      "Objective value at t=81 is 0.45730707902938955\n",
      "Objective value at t=82 is 0.45730699683825377\n",
      "Objective value at t=83 is 0.45730692441564236\n",
      "Objective value at t=84 is 0.4573068605942861\n",
      "Objective value at t=85 is 0.457306804347281\n",
      "Objective value at t=86 is 0.45730675477108196\n",
      "Objective value at t=87 is 0.4573067110705761\n",
      "Objective value at t=88 is 0.4573066725459767\n",
      "Objective value at t=89 is 0.45730663858131604\n",
      "Objective value at t=90 is 0.45730660863433914\n",
      "Objective value at t=91 is 0.4573065822276232\n",
      "Objective value at t=92 is 0.4573065589407789\n",
      "Objective value at t=93 is 0.45730653840359364\n",
      "Objective value at t=94 is 0.45730652029000707\n",
      "Objective value at t=95 is 0.45730650431281417\n",
      "Objective value at t=96 is 0.4573064902190087\n",
      "Objective value at t=97 is 0.45730647778568834\n",
      "Objective value at t=98 is 0.4573064668164529\n",
      "Objective value at t=99 is 0.45730645713823664\n"
     ]
    }
   ],
   "source": [
    "lam = 1E-6\n",
    "stepsize = 1.0\n",
    "w, objvals_gd = grad_descent(x_train, y_train, lam, stepsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kennr8fsWwuR"
   },
   "source": [
    "## 3.2. Stochastic gradient descent (SGD)\n",
    "\n",
    "Define $Q_i (w) = \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $.\n",
    "\n",
    "The stochastic gradient at $w$ is $g_i = \\frac{\\partial Q_i }{ \\partial w} = -\\frac{y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "05fCkLqkWwuR"
   },
   "outputs": [],
   "source": [
    "# Calculate the objective Q_i and the gradient of Q_i\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     xi: 1-by-d matrix\n",
    "#     yi: scalar\n",
    "#     lam: scalar, the regularization parameter\n",
    "# Return:\n",
    "#     obj: scalar, the objective Q_i\n",
    "#     g: d-by-1 matrix, gradient of Q_i\n",
    "def stochastic_objective_gradient(w, xi, yi, lam):\n",
    "    yx = yi * xi # 1-by-d matrix\n",
    "    yxw = float(numpy.dot(yx, w)) # scalar\n",
    "\n",
    "    # calculate objective function Q_i\n",
    "    loss = numpy.log(1 + numpy.exp(-yxw)) # scalar\n",
    "    reg = lam / 2 * numpy.sum(w * w) # scalar\n",
    "    obj = loss + reg\n",
    "\n",
    "    # calculate stochastic gradient\n",
    "    g_loss = -yx.T / (1 + numpy.exp(yxw)) # d-by-1 matrix\n",
    "    g = g_loss + lam * w # d-by-1 matrix\n",
    "\n",
    "    return obj, g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "0fiZaF_9WwuR"
   },
   "outputs": [],
   "source": [
    "# SGD for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     stepsize: scalar\n",
    "#     max_epoch: integer, the maximal epochs\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: the solution\n",
    "#     objvals: record of each iteration's objective value\n",
    "def sgd(x, y, lam, stepsize, max_epoch=100, w=None):\n",
    "    n, d = x.shape\n",
    "    objvals = numpy.zeros(max_epoch) # store the objective values\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1)) # zero initialization\n",
    "\n",
    "    for t in range(max_epoch):\n",
    "        # randomly shuffle the samples\n",
    "        rand_indices = numpy.random.permutation(n)\n",
    "        x_rand = x[rand_indices, :]\n",
    "        y_rand = y[rand_indices, :]\n",
    "\n",
    "        objval = 0 # accumulate the objective values\n",
    "        for i in range(n):\n",
    "            xi = x_rand[i, :] # 1-by-d matrix\n",
    "            yi = float(y_rand[i, :]) # scalar\n",
    "            obj, g = stochastic_objective_gradient(w, xi, yi, lam)\n",
    "            objval += obj\n",
    "            w -= stepsize * g\n",
    "\n",
    "        stepsize *= 0.9 # decrease step size\n",
    "        objval /= n\n",
    "        objvals[t] = objval\n",
    "        print('Objective value at epoch t=' + str(t) + ' is ' + str(objval))\n",
    "\n",
    "    return w, objvals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Hp0-nI00WwuR"
   },
   "source": [
    "Run SGD."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PzkebiDfWwuR",
    "outputId": "796bce2b-9538-4991-b2ef-d3f1af8bad39"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/6k/5k3qjx6974b2n9448y2x98040000gn/T/ipykernel_36592/700910057.py:27: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
      "  yi = float(y_rand[i, :]) # scalar\n",
      "/var/folders/6k/5k3qjx6974b2n9448y2x98040000gn/T/ipykernel_36592/3262954894.py:12: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
      "  yxw = float(numpy.dot(yx, w)) # scalar\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Objective value at epoch t=0 is 0.5223599100403203\n",
      "Objective value at epoch t=1 is 0.5066549238317162\n",
      "Objective value at epoch t=2 is 0.4980938123358043\n",
      "Objective value at epoch t=3 is 0.49568432565362386\n",
      "Objective value at epoch t=4 is 0.4878025947249592\n",
      "Objective value at epoch t=5 is 0.4870802155329613\n",
      "Objective value at epoch t=6 is 0.48523738230479846\n",
      "Objective value at epoch t=7 is 0.484818462489628\n",
      "Objective value at epoch t=8 is 0.48090216541003505\n",
      "Objective value at epoch t=9 is 0.47639143992690236\n",
      "Objective value at epoch t=10 is 0.47456930011586296\n",
      "Objective value at epoch t=11 is 0.4763250308118277\n",
      "Objective value at epoch t=12 is 0.47311016147132523\n",
      "Objective value at epoch t=13 is 0.4710931079670548\n",
      "Objective value at epoch t=14 is 0.4710960887113185\n",
      "Objective value at epoch t=15 is 0.46923550279216475\n",
      "Objective value at epoch t=16 is 0.4680216843739369\n",
      "Objective value at epoch t=17 is 0.4666420580202679\n",
      "Objective value at epoch t=18 is 0.4643180690809305\n",
      "Objective value at epoch t=19 is 0.4670078372942122\n",
      "Objective value at epoch t=20 is 0.46508322251023576\n",
      "Objective value at epoch t=21 is 0.46297766328638434\n",
      "Objective value at epoch t=22 is 0.4643530927950986\n",
      "Objective value at epoch t=23 is 0.46352818768481924\n",
      "Objective value at epoch t=24 is 0.4625553396596012\n",
      "Objective value at epoch t=25 is 0.4622956628186102\n",
      "Objective value at epoch t=26 is 0.46182789262302554\n",
      "Objective value at epoch t=27 is 0.4610738511286704\n",
      "Objective value at epoch t=28 is 0.4608125426509956\n",
      "Objective value at epoch t=29 is 0.46054363392062675\n",
      "Objective value at epoch t=30 is 0.4603620234605975\n",
      "Objective value at epoch t=31 is 0.4600383456372429\n",
      "Objective value at epoch t=32 is 0.45970731981516944\n",
      "Objective value at epoch t=33 is 0.45949995215124895\n",
      "Objective value at epoch t=34 is 0.4592492985687103\n",
      "Objective value at epoch t=35 is 0.4590413207434082\n",
      "Objective value at epoch t=36 is 0.4588990327303549\n",
      "Objective value at epoch t=37 is 0.458760279651786\n",
      "Objective value at epoch t=38 is 0.45860441924799045\n",
      "Objective value at epoch t=39 is 0.458452023986026\n",
      "Objective value at epoch t=40 is 0.4583536215199523\n",
      "Objective value at epoch t=41 is 0.4582608243625056\n",
      "Objective value at epoch t=42 is 0.45817260344894384\n",
      "Objective value at epoch t=43 is 0.4580766903015999\n",
      "Objective value at epoch t=44 is 0.458007816169285\n",
      "Objective value at epoch t=45 is 0.4579343686508811\n",
      "Objective value at epoch t=46 is 0.45787735788288597\n",
      "Objective value at epoch t=47 is 0.4578137669088185\n",
      "Objective value at epoch t=48 is 0.4577628021745488\n",
      "Objective value at epoch t=49 is 0.45771805897510953\n",
      "Objective value at epoch t=50 is 0.457680491353333\n",
      "Objective value at epoch t=51 is 0.4576446425970369\n",
      "Objective value at epoch t=52 is 0.4576095743525217\n",
      "Objective value at epoch t=53 is 0.45757987844799014\n",
      "Objective value at epoch t=54 is 0.457552910665152\n",
      "Objective value at epoch t=55 is 0.4575284918689747\n",
      "Objective value at epoch t=56 is 0.4575059858244018\n",
      "Objective value at epoch t=57 is 0.4574865141787573\n",
      "Objective value at epoch t=58 is 0.45746823838821243\n",
      "Objective value at epoch t=59 is 0.4574523055532899\n",
      "Objective value at epoch t=60 is 0.4574374720594866\n",
      "Objective value at epoch t=61 is 0.4574245947464872\n",
      "Objective value at epoch t=62 is 0.45741278936168206\n",
      "Objective value at epoch t=63 is 0.4574021305583334\n",
      "Objective value at epoch t=64 is 0.457392439534118\n",
      "Objective value at epoch t=65 is 0.457383993571984\n",
      "Objective value at epoch t=66 is 0.4573762342697406\n",
      "Objective value at epoch t=67 is 0.45736939533880266\n",
      "Objective value at epoch t=68 is 0.4573631404593793\n",
      "Objective value at epoch t=69 is 0.45735750482099835\n",
      "Objective value at epoch t=70 is 0.45735236156331666\n",
      "Objective value at epoch t=71 is 0.4573478162300771\n",
      "Objective value at epoch t=72 is 0.4573437151404283\n",
      "Objective value at epoch t=73 is 0.45734001960922477\n",
      "Objective value at epoch t=74 is 0.457336675417073\n",
      "Objective value at epoch t=75 is 0.45733366851860496\n",
      "Objective value at epoch t=76 is 0.4573309642908406\n",
      "Objective value at epoch t=77 is 0.4573285305472582\n",
      "Objective value at epoch t=78 is 0.45732634353493556\n",
      "Objective value at epoch t=79 is 0.4573243628420397\n",
      "Objective value at epoch t=80 is 0.45732258687700994\n",
      "Objective value at epoch t=81 is 0.4573209991125082\n",
      "Objective value at epoch t=82 is 0.4573195633987551\n",
      "Objective value at epoch t=83 is 0.45731826929042585\n",
      "Objective value at epoch t=84 is 0.45731710167711304\n",
      "Objective value at epoch t=85 is 0.45731605610619386\n",
      "Objective value at epoch t=86 is 0.45731511304284034\n",
      "Objective value at epoch t=87 is 0.4573142638534506\n",
      "Objective value at epoch t=88 is 0.45731350049116665\n",
      "Objective value at epoch t=89 is 0.45731281351726977\n",
      "Objective value at epoch t=90 is 0.4573121943688266\n",
      "Objective value at epoch t=91 is 0.45731163737824004\n",
      "Objective value at epoch t=92 is 0.4573111362565803\n",
      "Objective value at epoch t=93 is 0.45731068508735895\n",
      "Objective value at epoch t=94 is 0.45731027883583\n",
      "Objective value at epoch t=95 is 0.4573099135462472\n",
      "Objective value at epoch t=96 is 0.4573095844681\n",
      "Objective value at epoch t=97 is 0.45730928814588234\n",
      "Objective value at epoch t=98 is 0.4573090221263126\n",
      "Objective value at epoch t=99 is 0.45730878237928224\n"
     ]
    }
   ],
   "source": [
    "lam = 1E-6\n",
    "stepsize = 0.1\n",
    "w, objvals_sgd = sgd(x_train, y_train, lam, stepsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IGw0vkXAWwuR"
   },
   "source": [
    "# 4. Compare GD with SGD\n",
    "\n",
    "Plot objective function values against epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 407
    },
    "id": "2JlFm6e3WwuR",
    "outputId": "0249d227-b8c2-4693-f6dd-8429cbcebb90"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "fig = plt.figure(figsize=(6, 4))\n",
    "\n",
    "epochs_gd = range(len(objvals_gd))\n",
    "epochs_sgd = range(len(objvals_sgd))\n",
    "\n",
    "line0, = plt.plot(epochs_gd, objvals_gd, '--b', linewidth=4)\n",
    "line1, = plt.plot(epochs_sgd, objvals_sgd, '-r', linewidth=2)\n",
    "plt.xlabel('Epochs', fontsize=20)\n",
    "plt.ylabel('Objective Value', fontsize=20)\n",
    "plt.xticks(fontsize=16)\n",
    "plt.yticks(fontsize=16)\n",
    "plt.legend([line0, line1], ['GD', 'SGD'], fontsize=20)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "fig.savefig('compare_gd_sgd.pdf', format='pdf', dpi=1200)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "siN0D_VxWwuR"
   },
   "source": [
    "# 5. Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "yJDYtJjcWwuR"
   },
   "outputs": [],
   "source": [
    "# Predict class label\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     X: m-by-d matrix\n",
    "# Return:\n",
    "#     f: m-by-1 matrix, the predictions\n",
    "def predict(w, X):\n",
    "    xw = numpy.dot(X, w)\n",
    "    f = numpy.sign(xw)\n",
    "    return f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Sw4C6mWWWwuR",
    "outputId": "e87ad289-31cb-43cf-fb47-4f0484b91a4f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training classification error is 0.2171875\n"
     ]
    }
   ],
   "source": [
    "# evaluate training error\n",
    "f_train = predict(w, x_train)\n",
    "diff = numpy.abs(f_train - y_train) / 2\n",
    "error_train = numpy.mean(diff)\n",
    "print('Training classification error is ' + str(error_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KchoJ9FIWwuR",
    "outputId": "a2014ac4-f9ac-4b54-c748-b2824a663439"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test classification error is 0.21875\n"
     ]
    }
   ],
   "source": [
    "# evaluate test error\n",
    "f_test = predict(w, x_test)\n",
    "diff = numpy.abs(f_test - y_test) / 2\n",
    "error_test = numpy.mean(diff)\n",
    "print('Test classification error is ' + str(error_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U1A3anrWWwuS"
   },
   "source": [
    "# 6. Mini-batch SGD (fill the code)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7qjdCmUoWwuS"
   },
   "source": [
    "## 6.1. Compute the objective $Q_I$ and its gradient using a batch of samples\n",
    "\n",
    "Define $Q_I (w) = \\frac{1}{b} \\sum_{i \\in I} \\log \\Big( 1 + \\exp \\big( - y_i x_i^T w \\big) \\Big) + \\frac{\\lambda}{2} \\| w \\|_2^2 $, where $I$ is a set containing $b$ indices randomly drawn from $\\{ 1, \\cdots , n \\}$ without replacement.\n",
    "\n",
    "The stochastic gradient at $w$ is $g_I = \\frac{\\partial Q_I }{ \\partial w} = \\frac{1}{b} \\sum_{i \\in I} \\frac{- y_i x_i }{1 + \\exp ( y_i x_i^T w)} + \\lambda w$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "32JY0HvYWwuS"
   },
   "outputs": [],
   "source": [
    "# Calculate the objective Q_I and the gradient of Q_I\n",
    "# Inputs:\n",
    "#     w: d-by-1 matrix\n",
    "#     xi: b-by-d matrix\n",
    "#     yi: b-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     b: integer, the batch size\n",
    "# Return:\n",
    "#     obj: scalar, the objective Q_i\n",
    "#     g: d-by-1 matrix, gradient of Q_i\n",
    "def mb_stochastic_objective_gradient(w, xi, yi, lam, b):\n",
    "    yxw = numpy.dot(xi, w)\n",
    "    loss = numpy.log(1 + numpy.exp(numpy.multiply(-yi, yxw)))\n",
    "    reg = lam / 2 * numpy.sum(w * w)\n",
    "    obj = numpy.mean(loss) + reg\n",
    "    gradient = -numpy.dot(xi.T, yi / (1 + numpy.exp(numpy.multiply(yi, yxw)))) / b\n",
    "    g = gradient + lam * w\n",
    "\n",
    "    return obj, g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "keTAcpK_WwuS"
   },
   "source": [
    "## 6.2. Implement mini-batch SGD\n",
    "\n",
    "Hints:\n",
    "1. In every epoch, randomly permute the $n$ samples (just like SGD).\n",
    "2. Each epoch has $\\frac{n}{b}$ iterations. In every iteration, use $b$ samples, and compute the gradient and objective using the ``mb_stochastic_objective_gradient`` function. In the next iteration, use the next $b$ samples, and so on.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "H8ZrZQivWwuS"
   },
   "outputs": [],
   "source": [
    "# Mini-Batch SGD for solving logistic regression\n",
    "# Inputs:\n",
    "#     x: n-by-d matrix\n",
    "#     y: n-by-1 matrix\n",
    "#     lam: scalar, the regularization parameter\n",
    "#     b: integer, the batch size\n",
    "#     stepsize: scalar\n",
    "#     max_epoch: integer, the maximal epochs\n",
    "#     w: d-by-1 matrix, initialization of w\n",
    "# Return:\n",
    "#     w: the solution\n",
    "#     objvals: record of each iteration's objective value\n",
    "def mb_sgd(x, y, lam, b, stepsize, max_epoch=100, w=None):\n",
    "    n, d = x.shape\n",
    "    if w is None:\n",
    "        w = numpy.zeros((d, 1))\n",
    "    objvals = []\n",
    "\n",
    "    for epoch in range(max_epoch):\n",
    "        indices = numpy.random.permutation(n)\n",
    "        x_shuffled = x[indices]\n",
    "        y_shuffled = y[indices].reshape(-1, 1)\n",
    "\n",
    "        epoch_obj_val = 0\n",
    "        num_batches = n // b\n",
    "\n",
    "\n",
    "        for i in range(num_batches):\n",
    "            start = i * b\n",
    "            end = start + b\n",
    "            xi = x_shuffled[start:end]\n",
    "            yi = y_shuffled[start:end]\n",
    "\n",
    "            obj, gradient = mb_stochastic_objective_gradient(w, xi, yi, lam, b)\n",
    "            w -= stepsize * gradient\n",
    "\n",
    "            epoch_obj_val += obj\n",
    "\n",
    "        # Record the objective value for this epoch\n",
    "        epoch_obj_val /= num_batches\n",
    "        objvals.append(epoch_obj_val)\n",
    "        print(f'Epoch {epoch + 1}/{max_epoch}, Objective value: {objvals[-1]}')\n",
    "\n",
    "    return w, objvals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vLU3fXlxWwuW"
   },
   "source": [
    "## 6.3. Run MB-SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HC-znWPpWwuW",
    "outputId": "18f94945-06ff-4f54-c376-a0f25a6bd490"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing stepsize: 0.01\n",
      "Epoch 1/100, Objective value: 0.6516921425461295\n",
      "Epoch 2/100, Objective value: 0.591839759329739\n",
      "Epoch 3/100, Objective value: 0.5563908146049669\n",
      "Epoch 4/100, Objective value: 0.5335235402230117\n",
      "Epoch 5/100, Objective value: 0.51758261413831\n",
      "Epoch 6/100, Objective value: 0.5060149701990743\n",
      "Epoch 7/100, Objective value: 0.49742193058599576\n",
      "Epoch 8/100, Objective value: 0.4906460201627366\n",
      "Epoch 9/100, Objective value: 0.4853603724263723\n",
      "Epoch 10/100, Objective value: 0.48113132654937124\n",
      "Epoch 11/100, Objective value: 0.4776490335794385\n",
      "Epoch 12/100, Objective value: 0.47481432837341214\n",
      "Epoch 13/100, Objective value: 0.47254763977075714\n",
      "Epoch 14/100, Objective value: 0.47067790714724983\n",
      "Epoch 15/100, Objective value: 0.46886748557488966\n",
      "Epoch 16/100, Objective value: 0.46758198977994525\n",
      "Epoch 17/100, Objective value: 0.46626790287634867\n",
      "Epoch 18/100, Objective value: 0.4652558431560655\n",
      "Epoch 19/100, Objective value: 0.46441701151623677\n",
      "Epoch 20/100, Objective value: 0.4635744076526013\n",
      "Epoch 21/100, Objective value: 0.46302221471842336\n",
      "Epoch 22/100, Objective value: 0.46247868394056\n",
      "Epoch 23/100, Objective value: 0.4618606976406464\n",
      "Epoch 24/100, Objective value: 0.46151244752848397\n",
      "Epoch 25/100, Objective value: 0.46112227375086057\n",
      "Epoch 26/100, Objective value: 0.460804826701136\n",
      "Epoch 27/100, Objective value: 0.46046873533783417\n",
      "Epoch 28/100, Objective value: 0.46026711392266895\n",
      "Epoch 29/100, Objective value: 0.4600362794034166\n",
      "Epoch 30/100, Objective value: 0.4598151958541944\n",
      "Epoch 31/100, Objective value: 0.4595047058493368\n",
      "Epoch 32/100, Objective value: 0.45953577674781726\n",
      "Epoch 33/100, Objective value: 0.45932856053795923\n",
      "Epoch 34/100, Objective value: 0.459240668688242\n",
      "Epoch 35/100, Objective value: 0.4590588618798247\n",
      "Epoch 36/100, Objective value: 0.45890423799390617\n",
      "Epoch 37/100, Objective value: 0.4589725200726716\n",
      "Epoch 38/100, Objective value: 0.45883461188220726\n",
      "Epoch 39/100, Objective value: 0.45879887451867346\n",
      "Epoch 40/100, Objective value: 0.458711443767733\n",
      "Epoch 41/100, Objective value: 0.4586338730108115\n",
      "Epoch 42/100, Objective value: 0.4586735002603691\n",
      "Epoch 43/100, Objective value: 0.45855715024645577\n",
      "Epoch 44/100, Objective value: 0.458620341871019\n",
      "Epoch 45/100, Objective value: 0.45849694180308254\n",
      "Epoch 46/100, Objective value: 0.4585768254459956\n",
      "Epoch 47/100, Objective value: 0.4584148863544472\n",
      "Epoch 48/100, Objective value: 0.4584594317313626\n",
      "Epoch 49/100, Objective value: 0.45840343889480095\n",
      "Epoch 50/100, Objective value: 0.45839081446967284\n",
      "Epoch 51/100, Objective value: 0.45833428709355645\n",
      "Epoch 52/100, Objective value: 0.4583748162091892\n",
      "Epoch 53/100, Objective value: 0.4583241702802538\n",
      "Epoch 54/100, Objective value: 0.45822135322778923\n",
      "Epoch 55/100, Objective value: 0.45835651591951204\n",
      "Epoch 56/100, Objective value: 0.4582231365809138\n",
      "Epoch 57/100, Objective value: 0.458250320430034\n",
      "Epoch 58/100, Objective value: 0.4582895556813347\n",
      "Epoch 59/100, Objective value: 0.4582738246903795\n",
      "Epoch 60/100, Objective value: 0.4581734688502522\n",
      "Epoch 61/100, Objective value: 0.4581423102182483\n",
      "Epoch 62/100, Objective value: 0.45814270789786404\n",
      "Epoch 63/100, Objective value: 0.4581970494151114\n",
      "Epoch 64/100, Objective value: 0.4581750930681293\n",
      "Epoch 65/100, Objective value: 0.45814905625899616\n",
      "Epoch 66/100, Objective value: 0.45831760087792395\n",
      "Epoch 67/100, Objective value: 0.45822682942578014\n",
      "Epoch 68/100, Objective value: 0.45829586803460565\n",
      "Epoch 69/100, Objective value: 0.45820511204554804\n",
      "Epoch 70/100, Objective value: 0.45818252350722927\n",
      "Epoch 71/100, Objective value: 0.45818435182909373\n",
      "Epoch 72/100, Objective value: 0.4582209735809951\n",
      "Epoch 73/100, Objective value: 0.45826220939066414\n",
      "Epoch 74/100, Objective value: 0.45823699897191184\n",
      "Epoch 75/100, Objective value: 0.45821548335140205\n",
      "Epoch 76/100, Objective value: 0.45820415705129347\n",
      "Epoch 77/100, Objective value: 0.45825692566531295\n",
      "Epoch 78/100, Objective value: 0.4582431310067194\n",
      "Epoch 79/100, Objective value: 0.45815268311668156\n",
      "Epoch 80/100, Objective value: 0.45822463971726596\n",
      "Epoch 81/100, Objective value: 0.4582671162655917\n",
      "Epoch 82/100, Objective value: 0.45824164754398067\n",
      "Epoch 83/100, Objective value: 0.4582159804438243\n",
      "Epoch 84/100, Objective value: 0.45822203410492507\n",
      "Epoch 85/100, Objective value: 0.4582337098824012\n",
      "Epoch 86/100, Objective value: 0.458233631488718\n",
      "Epoch 87/100, Objective value: 0.4581445731896623\n",
      "Epoch 88/100, Objective value: 0.45818912146464913\n",
      "Epoch 89/100, Objective value: 0.45809898933946497\n",
      "Epoch 90/100, Objective value: 0.4581666012840847\n",
      "Epoch 91/100, Objective value: 0.4581325353951117\n",
      "Epoch 92/100, Objective value: 0.45824139115315654\n",
      "Epoch 93/100, Objective value: 0.4581906298228082\n",
      "Epoch 94/100, Objective value: 0.4581057394791593\n",
      "Epoch 95/100, Objective value: 0.4582592471735518\n",
      "Epoch 96/100, Objective value: 0.4582166993164078\n",
      "Epoch 97/100, Objective value: 0.4581570326881712\n",
      "Epoch 98/100, Objective value: 0.4582889791655059\n",
      "Epoch 99/100, Objective value: 0.45809506697142305\n",
      "Epoch 100/100, Objective value: 0.45821677541552014\n",
      "Testing stepsize: 0.05\n",
      "Epoch 1/100, Objective value: 0.5741355721371456\n",
      "Epoch 2/100, Objective value: 0.49465891620064256\n",
      "Epoch 3/100, Objective value: 0.47524964479965626\n",
      "Epoch 4/100, Objective value: 0.4682025745360735\n",
      "Epoch 5/100, Objective value: 0.46466607538958893\n",
      "Epoch 6/100, Objective value: 0.463102038605983\n",
      "Epoch 7/100, Objective value: 0.46255030076844594\n",
      "Epoch 8/100, Objective value: 0.46198947997593176\n",
      "Epoch 9/100, Objective value: 0.4616914340420785\n",
      "Epoch 10/100, Objective value: 0.4618695303921925\n",
      "Epoch 11/100, Objective value: 0.4614981577271394\n",
      "Epoch 12/100, Objective value: 0.46065690147495275\n",
      "Epoch 13/100, Objective value: 0.4615515188862475\n",
      "Epoch 14/100, Objective value: 0.46180506009004263\n",
      "Epoch 15/100, Objective value: 0.46173695577053514\n",
      "Epoch 16/100, Objective value: 0.46142301001739383\n",
      "Epoch 17/100, Objective value: 0.46184065234980964\n",
      "Epoch 18/100, Objective value: 0.4617329927950465\n",
      "Epoch 19/100, Objective value: 0.4615278541190988\n",
      "Epoch 20/100, Objective value: 0.461191621769787\n",
      "Epoch 21/100, Objective value: 0.4613099306544699\n",
      "Epoch 22/100, Objective value: 0.4615214287138003\n",
      "Epoch 23/100, Objective value: 0.4610450641196895\n",
      "Epoch 24/100, Objective value: 0.46128332124059074\n",
      "Epoch 25/100, Objective value: 0.46079651913013553\n",
      "Epoch 26/100, Objective value: 0.4615547080892326\n",
      "Epoch 27/100, Objective value: 0.46164396007838837\n",
      "Epoch 28/100, Objective value: 0.46076817724186\n",
      "Epoch 29/100, Objective value: 0.46156108436439497\n",
      "Epoch 30/100, Objective value: 0.46119049781099636\n",
      "Epoch 31/100, Objective value: 0.46108028483529306\n",
      "Epoch 32/100, Objective value: 0.4607469106315536\n",
      "Epoch 33/100, Objective value: 0.4615094347243732\n",
      "Epoch 34/100, Objective value: 0.461362827022732\n",
      "Epoch 35/100, Objective value: 0.4607273509280435\n",
      "Epoch 36/100, Objective value: 0.46151286493229315\n",
      "Epoch 37/100, Objective value: 0.46128429543086824\n",
      "Epoch 38/100, Objective value: 0.4610271467332073\n",
      "Epoch 39/100, Objective value: 0.46173353370901304\n",
      "Epoch 40/100, Objective value: 0.4617198746925326\n",
      "Epoch 41/100, Objective value: 0.4611064654895065\n",
      "Epoch 42/100, Objective value: 0.46207769913092306\n",
      "Epoch 43/100, Objective value: 0.4620022720813985\n",
      "Epoch 44/100, Objective value: 0.46105674851459144\n",
      "Epoch 45/100, Objective value: 0.4613856539543909\n",
      "Epoch 46/100, Objective value: 0.46152178331178256\n",
      "Epoch 47/100, Objective value: 0.461573258762772\n",
      "Epoch 48/100, Objective value: 0.460967025422125\n",
      "Epoch 49/100, Objective value: 0.4614812239292768\n",
      "Epoch 50/100, Objective value: 0.4619098716630501\n",
      "Epoch 51/100, Objective value: 0.4616546596869334\n",
      "Epoch 52/100, Objective value: 0.461380094672439\n",
      "Epoch 53/100, Objective value: 0.46134951360155735\n",
      "Epoch 54/100, Objective value: 0.4612799328983327\n",
      "Epoch 55/100, Objective value: 0.4617399835418011\n",
      "Epoch 56/100, Objective value: 0.4611249945043719\n",
      "Epoch 57/100, Objective value: 0.46166876930550105\n",
      "Epoch 58/100, Objective value: 0.4612337406774104\n",
      "Epoch 59/100, Objective value: 0.46121118044549075\n",
      "Epoch 60/100, Objective value: 0.4616579388339419\n",
      "Epoch 61/100, Objective value: 0.46185156138978145\n",
      "Epoch 62/100, Objective value: 0.4612897525950809\n",
      "Epoch 63/100, Objective value: 0.46180223810325743\n",
      "Epoch 64/100, Objective value: 0.4612984536444634\n",
      "Epoch 65/100, Objective value: 0.46099792537973794\n",
      "Epoch 66/100, Objective value: 0.4615089083561578\n",
      "Epoch 67/100, Objective value: 0.46148869972885553\n",
      "Epoch 68/100, Objective value: 0.4610842383591295\n",
      "Epoch 69/100, Objective value: 0.46156901398484634\n",
      "Epoch 70/100, Objective value: 0.46118915419866235\n",
      "Epoch 71/100, Objective value: 0.4613584837038672\n",
      "Epoch 72/100, Objective value: 0.461381393077304\n",
      "Epoch 73/100, Objective value: 0.46122602229763354\n",
      "Epoch 74/100, Objective value: 0.46134964400169565\n",
      "Epoch 75/100, Objective value: 0.4613557681296473\n",
      "Epoch 76/100, Objective value: 0.461518306799503\n",
      "Epoch 77/100, Objective value: 0.46155583340695694\n",
      "Epoch 78/100, Objective value: 0.46124963836328653\n",
      "Epoch 79/100, Objective value: 0.46169338339920385\n",
      "Epoch 80/100, Objective value: 0.4615213654492488\n",
      "Epoch 81/100, Objective value: 0.4612141803847101\n",
      "Epoch 82/100, Objective value: 0.46183629642746415\n",
      "Epoch 83/100, Objective value: 0.4608548096439685\n",
      "Epoch 84/100, Objective value: 0.46177112432943834\n",
      "Epoch 85/100, Objective value: 0.4611347276915551\n",
      "Epoch 86/100, Objective value: 0.4615070169880263\n",
      "Epoch 87/100, Objective value: 0.4611575263107063\n",
      "Epoch 88/100, Objective value: 0.4611678865143361\n",
      "Epoch 89/100, Objective value: 0.46096820018644447\n",
      "Epoch 90/100, Objective value: 0.46152777641702636\n",
      "Epoch 91/100, Objective value: 0.46176094685780467\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 92/100, Objective value: 0.4612225834339913\n",
      "Epoch 93/100, Objective value: 0.46148415855821756\n",
      "Epoch 94/100, Objective value: 0.4617919760033983\n",
      "Epoch 95/100, Objective value: 0.46113828527303474\n",
      "Epoch 96/100, Objective value: 0.46136797302720334\n",
      "Epoch 97/100, Objective value: 0.46154900386246417\n",
      "Epoch 98/100, Objective value: 0.4612740202467657\n",
      "Epoch 99/100, Objective value: 0.4617202651005097\n",
      "Epoch 100/100, Objective value: 0.46153704854410627\n",
      "Testing stepsize: 0.1\n",
      "Epoch 1/100, Objective value: 0.5399864854874354\n",
      "Epoch 2/100, Objective value: 0.47467077641187316\n",
      "Epoch 3/100, Objective value: 0.46808756613644553\n",
      "Epoch 4/100, Objective value: 0.4671654632594199\n",
      "Epoch 5/100, Objective value: 0.4660268969231528\n",
      "Epoch 6/100, Objective value: 0.4640764142778934\n",
      "Epoch 7/100, Objective value: 0.465529822254216\n",
      "Epoch 8/100, Objective value: 0.46495636453474043\n",
      "Epoch 9/100, Objective value: 0.4650971066238318\n",
      "Epoch 10/100, Objective value: 0.463638250561219\n",
      "Epoch 11/100, Objective value: 0.4641623610616616\n",
      "Epoch 12/100, Objective value: 0.4638584771820839\n",
      "Epoch 13/100, Objective value: 0.4655670781863884\n",
      "Epoch 14/100, Objective value: 0.46493106403258694\n",
      "Epoch 15/100, Objective value: 0.46568770580637925\n",
      "Epoch 16/100, Objective value: 0.46494087494626324\n",
      "Epoch 17/100, Objective value: 0.464933393957757\n",
      "Epoch 18/100, Objective value: 0.4648855761300152\n",
      "Epoch 19/100, Objective value: 0.4666490792761694\n",
      "Epoch 20/100, Objective value: 0.4652407915731681\n",
      "Epoch 21/100, Objective value: 0.46521601798643086\n",
      "Epoch 22/100, Objective value: 0.46541002333548587\n",
      "Epoch 23/100, Objective value: 0.4622254831684639\n",
      "Epoch 24/100, Objective value: 0.46615147802748247\n",
      "Epoch 25/100, Objective value: 0.46637487387153864\n",
      "Epoch 26/100, Objective value: 0.4659130793407841\n",
      "Epoch 27/100, Objective value: 0.46574129957050997\n",
      "Epoch 28/100, Objective value: 0.4650582612736646\n",
      "Epoch 29/100, Objective value: 0.46499832385076256\n",
      "Epoch 30/100, Objective value: 0.46521927023662357\n",
      "Epoch 31/100, Objective value: 0.46360529813687057\n",
      "Epoch 32/100, Objective value: 0.4654081662797355\n",
      "Epoch 33/100, Objective value: 0.4652407011298748\n",
      "Epoch 34/100, Objective value: 0.4661673752471728\n",
      "Epoch 35/100, Objective value: 0.4648515617352551\n",
      "Epoch 36/100, Objective value: 0.463893183236537\n",
      "Epoch 37/100, Objective value: 0.46434545350550704\n",
      "Epoch 38/100, Objective value: 0.4642817565996501\n",
      "Epoch 39/100, Objective value: 0.46553831566161374\n",
      "Epoch 40/100, Objective value: 0.464666387998338\n",
      "Epoch 41/100, Objective value: 0.4660764299595915\n",
      "Epoch 42/100, Objective value: 0.46402579633423074\n",
      "Epoch 43/100, Objective value: 0.4641886945452874\n",
      "Epoch 44/100, Objective value: 0.462440151313424\n",
      "Epoch 45/100, Objective value: 0.46595811801990755\n",
      "Epoch 46/100, Objective value: 0.4656840104334762\n",
      "Epoch 47/100, Objective value: 0.46558663515405313\n",
      "Epoch 48/100, Objective value: 0.46469400962459695\n",
      "Epoch 49/100, Objective value: 0.4654388891820732\n",
      "Epoch 50/100, Objective value: 0.46465737353925496\n",
      "Epoch 51/100, Objective value: 0.4650251773814599\n",
      "Epoch 52/100, Objective value: 0.4639639941802257\n",
      "Epoch 53/100, Objective value: 0.4658140956963674\n",
      "Epoch 54/100, Objective value: 0.4646564114348011\n",
      "Epoch 55/100, Objective value: 0.4645205039379877\n",
      "Epoch 56/100, Objective value: 0.46524607148723457\n",
      "Epoch 57/100, Objective value: 0.46491473997849286\n",
      "Epoch 58/100, Objective value: 0.4651999897535233\n",
      "Epoch 59/100, Objective value: 0.46612040572561736\n",
      "Epoch 60/100, Objective value: 0.46542625737804155\n",
      "Epoch 61/100, Objective value: 0.46476719875121253\n",
      "Epoch 62/100, Objective value: 0.4641122674902327\n",
      "Epoch 63/100, Objective value: 0.46477801096724203\n",
      "Epoch 64/100, Objective value: 0.4649453140104368\n",
      "Epoch 65/100, Objective value: 0.46563926717510273\n",
      "Epoch 66/100, Objective value: 0.4650787107526792\n",
      "Epoch 67/100, Objective value: 0.46610937545141107\n",
      "Epoch 68/100, Objective value: 0.46516527558873716\n",
      "Epoch 69/100, Objective value: 0.4655588498566818\n",
      "Epoch 70/100, Objective value: 0.46513702457703243\n",
      "Epoch 71/100, Objective value: 0.46376973844938474\n",
      "Epoch 72/100, Objective value: 0.46745848295593867\n",
      "Epoch 73/100, Objective value: 0.46498451075151337\n",
      "Epoch 74/100, Objective value: 0.4646859293821322\n",
      "Epoch 75/100, Objective value: 0.4651264606130181\n",
      "Epoch 76/100, Objective value: 0.46585890793772056\n",
      "Epoch 77/100, Objective value: 0.46429728667922987\n",
      "Epoch 78/100, Objective value: 0.4651763253767413\n",
      "Epoch 79/100, Objective value: 0.4644597042814607\n",
      "Epoch 80/100, Objective value: 0.4651653339423275\n",
      "Epoch 81/100, Objective value: 0.4651022106162003\n",
      "Epoch 82/100, Objective value: 0.4645224975257598\n",
      "Epoch 83/100, Objective value: 0.46293889422022394\n",
      "Epoch 84/100, Objective value: 0.4661416892697969\n",
      "Epoch 85/100, Objective value: 0.4626883444780132\n",
      "Epoch 86/100, Objective value: 0.46582640268557557\n",
      "Epoch 87/100, Objective value: 0.4654859670106073\n",
      "Epoch 88/100, Objective value: 0.4649289601436217\n",
      "Epoch 89/100, Objective value: 0.4649930081323165\n",
      "Epoch 90/100, Objective value: 0.46640921021639625\n",
      "Epoch 91/100, Objective value: 0.4645045503388995\n",
      "Epoch 92/100, Objective value: 0.46430024262518793\n",
      "Epoch 93/100, Objective value: 0.4646518978169877\n",
      "Epoch 94/100, Objective value: 0.46436780951975243\n",
      "Epoch 95/100, Objective value: 0.4643071532667647\n",
      "Epoch 96/100, Objective value: 0.4656751073963208\n",
      "Epoch 97/100, Objective value: 0.46486416888783905\n",
      "Epoch 98/100, Objective value: 0.46451242286506095\n",
      "Epoch 99/100, Objective value: 0.46532606915286384\n",
      "Epoch 100/100, Objective value: 0.46520274650107885\n",
      "Best stepsize: 0.01, Best objective value: 0.45821677541552014\n",
      "Epoch 1/100, Objective value: 0.6511621119662179\n",
      "Epoch 2/100, Objective value: 0.5914701740489227\n",
      "Epoch 3/100, Objective value: 0.5562394517980612\n",
      "Epoch 4/100, Objective value: 0.533376228634567\n",
      "Epoch 5/100, Objective value: 0.5175384635059663\n",
      "Epoch 6/100, Objective value: 0.5061299959722174\n",
      "Epoch 7/100, Objective value: 0.49747424822439745\n",
      "Epoch 8/100, Objective value: 0.4906598383615212\n",
      "Epoch 9/100, Objective value: 0.4853804911447531\n",
      "Epoch 10/100, Objective value: 0.48117851515153676\n",
      "Epoch 11/100, Objective value: 0.47768565536179075\n",
      "Epoch 12/100, Objective value: 0.47487938593079415\n",
      "Epoch 13/100, Objective value: 0.4725043622001549\n",
      "Epoch 14/100, Objective value: 0.4705743966316619\n",
      "Epoch 15/100, Objective value: 0.4689439530987089\n",
      "Epoch 16/100, Objective value: 0.46744606255413734\n",
      "Epoch 17/100, Objective value: 0.4662046013890648\n",
      "Epoch 18/100, Objective value: 0.465252903371774\n",
      "Epoch 19/100, Objective value: 0.4644698341213349\n",
      "Epoch 20/100, Objective value: 0.4636951609753798\n",
      "Epoch 21/100, Objective value: 0.46294889974889564\n",
      "Epoch 22/100, Objective value: 0.4624460944239573\n",
      "Epoch 23/100, Objective value: 0.4618668317857547\n",
      "Epoch 24/100, Objective value: 0.4614426161857422\n",
      "Epoch 25/100, Objective value: 0.46116678468727584\n",
      "Epoch 26/100, Objective value: 0.4608452538656914\n",
      "Epoch 27/100, Objective value: 0.460391550956926\n",
      "Epoch 28/100, Objective value: 0.4602352060170015\n",
      "Epoch 29/100, Objective value: 0.4600180109249566\n",
      "Epoch 30/100, Objective value: 0.4597666425831786\n",
      "Epoch 31/100, Objective value: 0.45959668287946737\n",
      "Epoch 32/100, Objective value: 0.4594853455211753\n",
      "Epoch 33/100, Objective value: 0.4592865483903239\n",
      "Epoch 34/100, Objective value: 0.45917252979458195\n",
      "Epoch 35/100, Objective value: 0.4591357080642644\n",
      "Epoch 36/100, Objective value: 0.45904998171229616\n",
      "Epoch 37/100, Objective value: 0.45894235095419866\n",
      "Epoch 38/100, Objective value: 0.45879365948449957\n",
      "Epoch 39/100, Objective value: 0.4587384937235889\n",
      "Epoch 40/100, Objective value: 0.45874062461503096\n",
      "Epoch 41/100, Objective value: 0.4586487943688411\n",
      "Epoch 42/100, Objective value: 0.4586841540323913\n",
      "Epoch 43/100, Objective value: 0.45863425378759165\n",
      "Epoch 44/100, Objective value: 0.4585958930671743\n",
      "Epoch 45/100, Objective value: 0.4584973536896092\n",
      "Epoch 46/100, Objective value: 0.45847016913196265\n",
      "Epoch 47/100, Objective value: 0.45838149762825287\n",
      "Epoch 48/100, Objective value: 0.45849564149244976\n",
      "Epoch 49/100, Objective value: 0.4584115455409042\n",
      "Epoch 50/100, Objective value: 0.45834972836247523\n",
      "Epoch 51/100, Objective value: 0.4583710550762774\n",
      "Epoch 52/100, Objective value: 0.4583059042609966\n",
      "Epoch 53/100, Objective value: 0.45832428827620575\n",
      "Epoch 54/100, Objective value: 0.45829951521408396\n",
      "Epoch 55/100, Objective value: 0.4582828687379955\n",
      "Epoch 56/100, Objective value: 0.45828147838677086\n",
      "Epoch 57/100, Objective value: 0.4582793455800568\n",
      "Epoch 58/100, Objective value: 0.45824431954967537\n",
      "Epoch 59/100, Objective value: 0.4583068503462141\n",
      "Epoch 60/100, Objective value: 0.45834328092138443\n",
      "Epoch 61/100, Objective value: 0.45820347416932855\n",
      "Epoch 62/100, Objective value: 0.45823299441259613\n",
      "Epoch 63/100, Objective value: 0.4583001670814027\n",
      "Epoch 64/100, Objective value: 0.4582205945752828\n",
      "Epoch 65/100, Objective value: 0.45827504519429774\n",
      "Epoch 66/100, Objective value: 0.4581839286179564\n",
      "Epoch 67/100, Objective value: 0.45815332613086623\n",
      "Epoch 68/100, Objective value: 0.45823407222326634\n",
      "Epoch 69/100, Objective value: 0.4582456597280653\n",
      "Epoch 70/100, Objective value: 0.458218847029102\n",
      "Epoch 71/100, Objective value: 0.45818854650404506\n",
      "Epoch 72/100, Objective value: 0.4581659966250814\n",
      "Epoch 73/100, Objective value: 0.4582175187941327\n",
      "Epoch 74/100, Objective value: 0.4582112288847866\n",
      "Epoch 75/100, Objective value: 0.4582131804485668\n",
      "Epoch 76/100, Objective value: 0.45817488297972897\n",
      "Epoch 77/100, Objective value: 0.45827488375003966\n",
      "Epoch 78/100, Objective value: 0.4581591394128143\n",
      "Epoch 79/100, Objective value: 0.4583282463957442\n",
      "Epoch 80/100, Objective value: 0.45824512006501816\n",
      "Epoch 81/100, Objective value: 0.45828836204589685\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 82/100, Objective value: 0.45818066120427436\n",
      "Epoch 83/100, Objective value: 0.4581909948289284\n",
      "Epoch 84/100, Objective value: 0.4581548092341804\n",
      "Epoch 85/100, Objective value: 0.45824537846554625\n",
      "Epoch 86/100, Objective value: 0.4582369851296854\n",
      "Epoch 87/100, Objective value: 0.4581224127110312\n",
      "Epoch 88/100, Objective value: 0.45825956501897086\n",
      "Epoch 89/100, Objective value: 0.4582011608164347\n",
      "Epoch 90/100, Objective value: 0.45811367145714144\n",
      "Epoch 91/100, Objective value: 0.4581999747297904\n",
      "Epoch 92/100, Objective value: 0.4581737191883913\n",
      "Epoch 93/100, Objective value: 0.45812870309482434\n",
      "Epoch 94/100, Objective value: 0.45816868295079427\n",
      "Epoch 95/100, Objective value: 0.4582005104457763\n",
      "Epoch 96/100, Objective value: 0.4582326407569421\n",
      "Epoch 97/100, Objective value: 0.458124009298052\n",
      "Epoch 98/100, Objective value: 0.4581990104784007\n",
      "Epoch 99/100, Objective value: 0.45821800253471495\n",
      "Epoch 100/100, Objective value: 0.4581905071688365\n"
     ]
    }
   ],
   "source": [
    "# MB-SGD with batch size b=8\n",
    "lam = 1E-6 # do not change\n",
    "b = 8 # do not change\n",
    "stepsize = 0.1 # you must tune this parameter\n",
    "\n",
    "#w, objvals_mbsgd8 = mb_sgd(x_train, y_train, lam, b, stepsize)\n",
    "\n",
    "best_stepsize = None\n",
    "best_objval = float('inf')\n",
    "best_w = None\n",
    "max_epoch = 100\n",
    "\n",
    "# Try different step sizes\n",
    "for stepsize in [0.01, 0.05, 0.1]:\n",
    "    print(f\"Testing stepsize: {stepsize}\")\n",
    "    w, objvals = mb_sgd(x_train, y_train, lam, b, stepsize, max_epoch)\n",
    "    final_objval = objvals[-1]\n",
    "    if final_objval < best_objval:\n",
    "        best_objval = final_objval\n",
    "        best_stepsize = stepsize\n",
    "        best_w = w\n",
    "\n",
    "print(f\"Best stepsize: {best_stepsize}, Best objective value: {best_objval}\")\n",
    "\n",
    "# Run the best step size again for final confirmation\n",
    "w, objvals_mbsgd8 = mb_sgd(x_train, y_train, lam, b, best_stepsize, max_epoch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tIM1JX6PiRBo"
   },
   "source": [
    "Best stepsize: 0.01, Best objective value: 0.45821677541552014"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "C-y3auUfWwuW",
    "outputId": "6d6287c3-e3a4-4006-d98b-eec487218233"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing stepsize: 0.01\n",
      "Epoch 1/100, Objective value: 0.6875121918556263\n",
      "Epoch 2/100, Objective value: 0.6751801872542499\n",
      "Epoch 3/100, Objective value: 0.6638541090230154\n",
      "Epoch 4/100, Objective value: 0.6533569257641275\n",
      "Epoch 5/100, Objective value: 0.6436795707015707\n",
      "Epoch 6/100, Objective value: 0.6347581772547565\n",
      "Epoch 7/100, Objective value: 0.6263731183787679\n",
      "Epoch 8/100, Objective value: 0.618639569593103\n",
      "Epoch 9/100, Objective value: 0.6114559066782659\n",
      "Epoch 10/100, Objective value: 0.6046942405666382\n",
      "Epoch 11/100, Objective value: 0.5984078762117611\n",
      "Epoch 12/100, Objective value: 0.5925099886184191\n",
      "Epoch 13/100, Objective value: 0.5870528181072169\n",
      "Epoch 14/100, Objective value: 0.581902640134085\n",
      "Epoch 15/100, Objective value: 0.5770132996791801\n",
      "Epoch 16/100, Objective value: 0.5724917304871405\n",
      "Epoch 17/100, Objective value: 0.5681678359885345\n",
      "Epoch 18/100, Objective value: 0.5641041771696739\n",
      "Epoch 19/100, Objective value: 0.5602742310992717\n",
      "Epoch 20/100, Objective value: 0.556619973863166\n",
      "Epoch 21/100, Objective value: 0.5531804580174763\n",
      "Epoch 22/100, Objective value: 0.5499390743783341\n",
      "Epoch 23/100, Objective value: 0.5468321670874954\n",
      "Epoch 24/100, Objective value: 0.5438969339761685\n",
      "Epoch 25/100, Objective value: 0.5410997634201263\n",
      "Epoch 26/100, Objective value: 0.5384810780619351\n",
      "Epoch 27/100, Objective value: 0.5358661516256902\n",
      "Epoch 28/100, Objective value: 0.5334573901032522\n",
      "Epoch 29/100, Objective value: 0.5311824581150189\n",
      "Epoch 30/100, Objective value: 0.5289207604095298\n",
      "Epoch 31/100, Objective value: 0.526810432172551\n",
      "Epoch 32/100, Objective value: 0.5247563345427348\n",
      "Epoch 33/100, Objective value: 0.522796694963362\n",
      "Epoch 34/100, Objective value: 0.5209250752184573\n",
      "Epoch 35/100, Objective value: 0.5191944422702672\n",
      "Epoch 36/100, Objective value: 0.5174124660183478\n",
      "Epoch 37/100, Objective value: 0.5157816349593384\n",
      "Epoch 38/100, Objective value: 0.5141613593844745\n",
      "Epoch 39/100, Objective value: 0.5126543011534102\n",
      "Epoch 40/100, Objective value: 0.51115973346008\n",
      "Epoch 41/100, Objective value: 0.5097268144960593\n",
      "Epoch 42/100, Objective value: 0.5084176320629283\n",
      "Epoch 43/100, Objective value: 0.5070715632142402\n",
      "Epoch 44/100, Objective value: 0.5057731097112619\n",
      "Epoch 45/100, Objective value: 0.5045469137934193\n",
      "Epoch 46/100, Objective value: 0.5033740005656728\n",
      "Epoch 47/100, Objective value: 0.5022548643180661\n",
      "Epoch 48/100, Objective value: 0.5010939231996736\n",
      "Epoch 49/100, Objective value: 0.5000317162509915\n",
      "Epoch 50/100, Objective value: 0.49902738466290397\n",
      "Epoch 51/100, Objective value: 0.49799237945866903\n",
      "Epoch 52/100, Objective value: 0.49703792464866436\n",
      "Epoch 53/100, Objective value: 0.4960955995084683\n",
      "Epoch 54/100, Objective value: 0.4951671678537134\n",
      "Epoch 55/100, Objective value: 0.49423749836042186\n",
      "Epoch 56/100, Objective value: 0.49344880771312294\n",
      "Epoch 57/100, Objective value: 0.4926067658432136\n",
      "Epoch 58/100, Objective value: 0.49175141626227026\n",
      "Epoch 59/100, Objective value: 0.4910091394711177\n",
      "Epoch 60/100, Objective value: 0.49022705448100057\n",
      "Epoch 61/100, Objective value: 0.48950479420557685\n",
      "Epoch 62/100, Objective value: 0.48879652095671433\n",
      "Epoch 63/100, Objective value: 0.48808969243740624\n",
      "Epoch 64/100, Objective value: 0.4874042541180753\n",
      "Epoch 65/100, Objective value: 0.48673014081405297\n",
      "Epoch 66/100, Objective value: 0.4861192506874845\n",
      "Epoch 67/100, Objective value: 0.4855114374439193\n",
      "Epoch 68/100, Objective value: 0.4848677242492583\n",
      "Epoch 69/100, Objective value: 0.4843010768071026\n",
      "Epoch 70/100, Objective value: 0.48371556084769524\n",
      "Epoch 71/100, Objective value: 0.4831693567124461\n",
      "Epoch 72/100, Objective value: 0.48263299222619266\n",
      "Epoch 73/100, Objective value: 0.48214673566258676\n",
      "Epoch 74/100, Objective value: 0.48159078742626377\n",
      "Epoch 75/100, Objective value: 0.48110712153372387\n",
      "Epoch 76/100, Objective value: 0.4805713511385764\n",
      "Epoch 77/100, Objective value: 0.480137139862439\n",
      "Epoch 78/100, Objective value: 0.4796379300572835\n",
      "Epoch 79/100, Objective value: 0.47919712520554647\n",
      "Epoch 80/100, Objective value: 0.4787595102316932\n",
      "Epoch 81/100, Objective value: 0.47836837018848966\n",
      "Epoch 82/100, Objective value: 0.4779391880872189\n",
      "Epoch 83/100, Objective value: 0.47756014463921925\n",
      "Epoch 84/100, Objective value: 0.4771151909813248\n",
      "Epoch 85/100, Objective value: 0.47675546401163604\n",
      "Epoch 86/100, Objective value: 0.4763409673116061\n",
      "Epoch 87/100, Objective value: 0.47598684506624\n",
      "Epoch 88/100, Objective value: 0.4756236841766187\n",
      "Epoch 89/100, Objective value: 0.47528150539703484\n",
      "Epoch 90/100, Objective value: 0.4748763095620415\n",
      "Epoch 91/100, Objective value: 0.4745776819513493\n",
      "Epoch 92/100, Objective value: 0.47425033827859187\n",
      "Epoch 93/100, Objective value: 0.4739268823088622\n",
      "Epoch 94/100, Objective value: 0.473605129166278\n",
      "Epoch 95/100, Objective value: 0.47332368946295106\n",
      "Epoch 96/100, Objective value: 0.4730093417089236\n",
      "Epoch 97/100, Objective value: 0.47272381977044653\n",
      "Epoch 98/100, Objective value: 0.4724245797638186\n",
      "Epoch 99/100, Objective value: 0.47212280228086145\n",
      "Epoch 100/100, Objective value: 0.4719151888824663\n",
      "Testing stepsize: 0.05\n",
      "Epoch 1/100, Objective value: 0.6671844640615061\n",
      "Epoch 2/100, Objective value: 0.620509196276549\n",
      "Epoch 3/100, Objective value: 0.5885237928408069\n",
      "Epoch 4/100, Objective value: 0.5650394928720458\n",
      "Epoch 5/100, Objective value: 0.5472455752394974\n",
      "Epoch 6/100, Objective value: 0.5340561971049571\n",
      "Epoch 7/100, Objective value: 0.5235893769270723\n",
      "Epoch 8/100, Objective value: 0.5146657201459622\n",
      "Epoch 9/100, Objective value: 0.5074430088818342\n",
      "Epoch 10/100, Objective value: 0.5014787752261387\n",
      "Epoch 11/100, Objective value: 0.49649068425722975\n",
      "Epoch 12/100, Objective value: 0.49229107721217674\n",
      "Epoch 13/100, Objective value: 0.488592264081391\n",
      "Epoch 14/100, Objective value: 0.48526763051824917\n",
      "Epoch 15/100, Objective value: 0.48237148900812776\n",
      "Epoch 16/100, Objective value: 0.4800050772537068\n",
      "Epoch 17/100, Objective value: 0.47791866603803956\n",
      "Epoch 18/100, Objective value: 0.4759606125253626\n",
      "Epoch 19/100, Objective value: 0.47408813177791814\n",
      "Epoch 20/100, Objective value: 0.47281599081085524\n",
      "Epoch 21/100, Objective value: 0.4714259543240201\n",
      "Epoch 22/100, Objective value: 0.4703543485704535\n",
      "Epoch 23/100, Objective value: 0.4691076936032754\n",
      "Epoch 24/100, Objective value: 0.4680949040427416\n",
      "Epoch 25/100, Objective value: 0.46730818971428445\n",
      "Epoch 26/100, Objective value: 0.4664426561730227\n",
      "Epoch 27/100, Objective value: 0.4659079324230123\n",
      "Epoch 28/100, Objective value: 0.46507690242037725\n",
      "Epoch 29/100, Objective value: 0.46452153109319483\n",
      "Epoch 30/100, Objective value: 0.4642173650446577\n",
      "Epoch 31/100, Objective value: 0.46363150235731554\n",
      "Epoch 32/100, Objective value: 0.4631664168912361\n",
      "Epoch 33/100, Objective value: 0.4626759434340171\n",
      "Epoch 34/100, Objective value: 0.46224882386431937\n",
      "Epoch 35/100, Objective value: 0.4619303819248309\n",
      "Epoch 36/100, Objective value: 0.46177479489850215\n",
      "Epoch 37/100, Objective value: 0.46131464117006005\n",
      "Epoch 38/100, Objective value: 0.4612407627772471\n",
      "Epoch 39/100, Objective value: 0.46095801881524334\n",
      "Epoch 40/100, Objective value: 0.4607677717300702\n",
      "Epoch 41/100, Objective value: 0.4604088730460457\n",
      "Epoch 42/100, Objective value: 0.46029643405709864\n",
      "Epoch 43/100, Objective value: 0.46021733910223717\n",
      "Epoch 44/100, Objective value: 0.45984502285458095\n",
      "Epoch 45/100, Objective value: 0.4597496363606556\n",
      "Epoch 46/100, Objective value: 0.4597001587740814\n",
      "Epoch 47/100, Objective value: 0.4596137514009052\n",
      "Epoch 48/100, Objective value: 0.4595119403285204\n",
      "Epoch 49/100, Objective value: 0.4593892890557811\n",
      "Epoch 50/100, Objective value: 0.4591295390797576\n",
      "Epoch 51/100, Objective value: 0.4590264764642796\n",
      "Epoch 52/100, Objective value: 0.4591412880139553\n",
      "Epoch 53/100, Objective value: 0.4587747913498278\n",
      "Epoch 54/100, Objective value: 0.45875059868557627\n",
      "Epoch 55/100, Objective value: 0.45875122392485324\n",
      "Epoch 56/100, Objective value: 0.458581469872009\n",
      "Epoch 57/100, Objective value: 0.4586855275856144\n",
      "Epoch 58/100, Objective value: 0.45851099087621094\n",
      "Epoch 59/100, Objective value: 0.45862652368909557\n",
      "Epoch 60/100, Objective value: 0.4584465192588375\n",
      "Epoch 61/100, Objective value: 0.4584432524279142\n",
      "Epoch 62/100, Objective value: 0.45829776284211177\n",
      "Epoch 63/100, Objective value: 0.4583916483655683\n",
      "Epoch 64/100, Objective value: 0.45820614668396964\n",
      "Epoch 65/100, Objective value: 0.45838239978977857\n",
      "Epoch 66/100, Objective value: 0.4583376597617774\n",
      "Epoch 67/100, Objective value: 0.4582178398758415\n",
      "Epoch 68/100, Objective value: 0.4580852167824704\n",
      "Epoch 69/100, Objective value: 0.4581222615866758\n",
      "Epoch 70/100, Objective value: 0.45819733767037507\n",
      "Epoch 71/100, Objective value: 0.4582008948595978\n",
      "Epoch 72/100, Objective value: 0.4581734008592539\n",
      "Epoch 73/100, Objective value: 0.4578809017266178\n",
      "Epoch 74/100, Objective value: 0.4580064537841541\n",
      "Epoch 75/100, Objective value: 0.45813635788953244\n",
      "Epoch 76/100, Objective value: 0.45805535114743634\n",
      "Epoch 77/100, Objective value: 0.45791958247607856\n",
      "Epoch 78/100, Objective value: 0.4579779670928942\n",
      "Epoch 79/100, Objective value: 0.4579732790295088\n",
      "Epoch 80/100, Objective value: 0.4579498626026469\n",
      "Epoch 81/100, Objective value: 0.45793365168748873\n",
      "Epoch 82/100, Objective value: 0.4580010253128092\n",
      "Epoch 83/100, Objective value: 0.45785926174078184\n",
      "Epoch 84/100, Objective value: 0.4579532398991771\n",
      "Epoch 85/100, Objective value: 0.45810305472895063\n",
      "Epoch 86/100, Objective value: 0.4580303787260914\n",
      "Epoch 87/100, Objective value: 0.458065032421635\n",
      "Epoch 88/100, Objective value: 0.4578380913127794\n",
      "Epoch 89/100, Objective value: 0.45788428430650996\n",
      "Epoch 90/100, Objective value: 0.45785091094748864\n",
      "Epoch 91/100, Objective value: 0.45795346182305946\n",
      "Epoch 92/100, Objective value: 0.45783443149626607\n",
      "Epoch 93/100, Objective value: 0.4577355359587395\n",
      "Epoch 94/100, Objective value: 0.4580472779236205\n",
      "Epoch 95/100, Objective value: 0.457977243460914\n",
      "Epoch 96/100, Objective value: 0.4578958471692662\n",
      "Epoch 97/100, Objective value: 0.4578683213004255\n",
      "Epoch 98/100, Objective value: 0.45790417606405687\n",
      "Epoch 99/100, Objective value: 0.4578746780982785\n",
      "Epoch 100/100, Objective value: 0.4578000800630667\n",
      "Testing stepsize: 0.1\n",
      "Epoch 1/100, Objective value: 0.6469170322826019\n",
      "Epoch 2/100, Objective value: 0.5778965893932317\n",
      "Epoch 3/100, Objective value: 0.5412368315485184\n",
      "Epoch 4/100, Objective value: 0.5194128970625227\n",
      "Epoch 5/100, Objective value: 0.5049899167623572\n",
      "Epoch 6/100, Objective value: 0.49474489427519935\n",
      "Epoch 7/100, Objective value: 0.48747070018016697\n",
      "Epoch 8/100, Objective value: 0.48193611820262044\n",
      "Epoch 9/100, Objective value: 0.4773836272267098\n",
      "Epoch 10/100, Objective value: 0.47407707974512964\n",
      "Epoch 11/100, Objective value: 0.47109288457122583\n",
      "Epoch 12/100, Objective value: 0.46910621862773993\n",
      "Epoch 13/100, Objective value: 0.46730256625290306\n",
      "Epoch 14/100, Objective value: 0.46615029691837934\n",
      "Epoch 15/100, Objective value: 0.46478930630350757\n",
      "Epoch 16/100, Objective value: 0.46438963954276613\n",
      "Epoch 17/100, Objective value: 0.46298142890674826\n",
      "Epoch 18/100, Objective value: 0.46244742431137\n",
      "Epoch 19/100, Objective value: 0.46175742425700933\n",
      "Epoch 20/100, Objective value: 0.4614287713818507\n",
      "Epoch 21/100, Objective value: 0.46099950394928724\n",
      "Epoch 22/100, Objective value: 0.46061121331857313\n",
      "Epoch 23/100, Objective value: 0.4602085215839599\n",
      "Epoch 24/100, Objective value: 0.4597412036673834\n",
      "Epoch 25/100, Objective value: 0.45978883675185667\n",
      "Epoch 26/100, Objective value: 0.45959739632884994\n",
      "Epoch 27/100, Objective value: 0.45935739295687766\n",
      "Epoch 28/100, Objective value: 0.4590637593476054\n",
      "Epoch 29/100, Objective value: 0.45901826515157146\n",
      "Epoch 30/100, Objective value: 0.45895234085449343\n",
      "Epoch 31/100, Objective value: 0.4590627833875601\n",
      "Epoch 32/100, Objective value: 0.45897103827646835\n",
      "Epoch 33/100, Objective value: 0.45868883223520635\n",
      "Epoch 34/100, Objective value: 0.45913449554431224\n",
      "Epoch 35/100, Objective value: 0.45896936264428334\n",
      "Epoch 36/100, Objective value: 0.4592592064102072\n",
      "Epoch 37/100, Objective value: 0.45860967252811546\n",
      "Epoch 38/100, Objective value: 0.458509389586178\n",
      "Epoch 39/100, Objective value: 0.4586244880561094\n",
      "Epoch 40/100, Objective value: 0.45892127477306877\n",
      "Epoch 41/100, Objective value: 0.4586322622508422\n",
      "Epoch 42/100, Objective value: 0.4580256426774775\n",
      "Epoch 43/100, Objective value: 0.4584289730795583\n",
      "Epoch 44/100, Objective value: 0.4584955160162892\n",
      "Epoch 45/100, Objective value: 0.4583323294782298\n",
      "Epoch 46/100, Objective value: 0.4582078683074344\n",
      "Epoch 47/100, Objective value: 0.45847884697107705\n",
      "Epoch 48/100, Objective value: 0.4588678688344924\n",
      "Epoch 49/100, Objective value: 0.4584476899433211\n",
      "Epoch 50/100, Objective value: 0.4582780815573314\n",
      "Epoch 51/100, Objective value: 0.4580578531464356\n",
      "Epoch 52/100, Objective value: 0.458280432974527\n",
      "Epoch 53/100, Objective value: 0.4582869099475412\n",
      "Epoch 54/100, Objective value: 0.4582055248409008\n",
      "Epoch 55/100, Objective value: 0.45809405501227196\n",
      "Epoch 56/100, Objective value: 0.4583361028187383\n",
      "Epoch 57/100, Objective value: 0.45807982279866655\n",
      "Epoch 58/100, Objective value: 0.458379189764689\n",
      "Epoch 59/100, Objective value: 0.45835938662545345\n",
      "Epoch 60/100, Objective value: 0.45841482889502283\n",
      "Epoch 61/100, Objective value: 0.45819065337833403\n",
      "Epoch 62/100, Objective value: 0.45860878453698684\n",
      "Epoch 63/100, Objective value: 0.45852173256397866\n",
      "Epoch 64/100, Objective value: 0.4582374156510201\n",
      "Epoch 65/100, Objective value: 0.4585528667782916\n",
      "Epoch 66/100, Objective value: 0.45837544009861403\n",
      "Epoch 67/100, Objective value: 0.45834524536706966\n",
      "Epoch 68/100, Objective value: 0.4583233716698077\n",
      "Epoch 69/100, Objective value: 0.45824306999901643\n",
      "Epoch 70/100, Objective value: 0.4582706091089717\n",
      "Epoch 71/100, Objective value: 0.45834114322995634\n",
      "Epoch 72/100, Objective value: 0.45849046339365024\n",
      "Epoch 73/100, Objective value: 0.4583883375853862\n",
      "Epoch 74/100, Objective value: 0.45833779209816045\n",
      "Epoch 75/100, Objective value: 0.4582046044882926\n",
      "Epoch 76/100, Objective value: 0.4581653569035944\n",
      "Epoch 77/100, Objective value: 0.45821725024807414\n",
      "Epoch 78/100, Objective value: 0.45839368113220125\n",
      "Epoch 79/100, Objective value: 0.4579097567365019\n",
      "Epoch 80/100, Objective value: 0.4585225440896591\n",
      "Epoch 81/100, Objective value: 0.458208637852204\n",
      "Epoch 82/100, Objective value: 0.45808749453103703\n",
      "Epoch 83/100, Objective value: 0.45811682541615484\n",
      "Epoch 84/100, Objective value: 0.45828153800253285\n",
      "Epoch 85/100, Objective value: 0.4583934297727336\n",
      "Epoch 86/100, Objective value: 0.45856814665853013\n",
      "Epoch 87/100, Objective value: 0.45831119906807005\n",
      "Epoch 88/100, Objective value: 0.4585145672696636\n",
      "Epoch 89/100, Objective value: 0.45873386476951633\n",
      "Epoch 90/100, Objective value: 0.4584423530122491\n",
      "Epoch 91/100, Objective value: 0.4588207740955902\n",
      "Epoch 92/100, Objective value: 0.45830580453223\n",
      "Epoch 93/100, Objective value: 0.45831070543376884\n",
      "Epoch 94/100, Objective value: 0.4581721408000446\n",
      "Epoch 95/100, Objective value: 0.45828078594624344\n",
      "Epoch 96/100, Objective value: 0.45863506973680773\n",
      "Epoch 97/100, Objective value: 0.4584126952667892\n",
      "Epoch 98/100, Objective value: 0.4584827130564387\n",
      "Epoch 99/100, Objective value: 0.45821107955479556\n",
      "Epoch 100/100, Objective value: 0.45801437768409947\n",
      "Best stepsize: 0.05, Best objective value: 0.4578000800630667\n",
      "Epoch 1/100, Objective value: 0.667199083364159\n",
      "Epoch 2/100, Objective value: 0.6208428678716885\n",
      "Epoch 3/100, Objective value: 0.5885860584082728\n",
      "Epoch 4/100, Objective value: 0.5649854369083167\n",
      "Epoch 5/100, Objective value: 0.5477060354257224\n",
      "Epoch 6/100, Objective value: 0.5341177142991157\n",
      "Epoch 7/100, Objective value: 0.5234622865614449\n",
      "Epoch 8/100, Objective value: 0.5147402866216133\n",
      "Epoch 9/100, Objective value: 0.5076264226815785\n",
      "Epoch 10/100, Objective value: 0.5017446317763715\n",
      "Epoch 11/100, Objective value: 0.4962909515271856\n",
      "Epoch 12/100, Objective value: 0.49213717360283793\n",
      "Epoch 13/100, Objective value: 0.4884846547330749\n",
      "Epoch 14/100, Objective value: 0.4853324225001723\n",
      "Epoch 15/100, Objective value: 0.4823544449342559\n",
      "Epoch 16/100, Objective value: 0.480106971264796\n",
      "Epoch 17/100, Objective value: 0.47804231934401775\n",
      "Epoch 18/100, Objective value: 0.4759671214238005\n",
      "Epoch 19/100, Objective value: 0.4742431805173026\n",
      "Epoch 20/100, Objective value: 0.47279893190260164\n",
      "Epoch 21/100, Objective value: 0.4714741182430953\n",
      "Epoch 22/100, Objective value: 0.4702917046559275\n",
      "Epoch 23/100, Objective value: 0.46914841498564\n",
      "Epoch 24/100, Objective value: 0.46819471221536135\n",
      "Epoch 25/100, Objective value: 0.46722448353328766\n",
      "Epoch 26/100, Objective value: 0.46670166527573853\n",
      "Epoch 27/100, Objective value: 0.4658278937109424\n",
      "Epoch 28/100, Objective value: 0.4652568107677286\n",
      "Epoch 29/100, Objective value: 0.46455041172019174\n",
      "Epoch 30/100, Objective value: 0.4640890290766372\n",
      "Epoch 31/100, Objective value: 0.46353823336478317\n",
      "Epoch 32/100, Objective value: 0.46313220791448806\n",
      "Epoch 33/100, Objective value: 0.46267544916078124\n",
      "Epoch 34/100, Objective value: 0.46248262584861727\n",
      "Epoch 35/100, Objective value: 0.46194828250020076\n",
      "Epoch 36/100, Objective value: 0.46174480132774753\n",
      "Epoch 37/100, Objective value: 0.46125182066846654\n",
      "Epoch 38/100, Objective value: 0.4612291536864667\n",
      "Epoch 39/100, Objective value: 0.4608903396918381\n",
      "Epoch 40/100, Objective value: 0.46056173475511153\n",
      "Epoch 41/100, Objective value: 0.4604513642709863\n",
      "Epoch 42/100, Objective value: 0.46051663004177623\n",
      "Epoch 43/100, Objective value: 0.4600732956075178\n",
      "Epoch 44/100, Objective value: 0.45983775570615304\n",
      "Epoch 45/100, Objective value: 0.4598416455957703\n",
      "Epoch 46/100, Objective value: 0.45960852738262403\n",
      "Epoch 47/100, Objective value: 0.45964577855772504\n",
      "Epoch 48/100, Objective value: 0.45930680809195545\n",
      "Epoch 49/100, Objective value: 0.45931027478276076\n",
      "Epoch 50/100, Objective value: 0.4592489925472871\n",
      "Epoch 51/100, Objective value: 0.4590338892537413\n",
      "Epoch 52/100, Objective value: 0.45892823280979966\n",
      "Epoch 53/100, Objective value: 0.4590393689719357\n",
      "Epoch 54/100, Objective value: 0.4588457778321259\n",
      "Epoch 55/100, Objective value: 0.45881981046451453\n",
      "Epoch 56/100, Objective value: 0.4585974731944818\n",
      "Epoch 57/100, Objective value: 0.45846693105647224\n",
      "Epoch 58/100, Objective value: 0.4585378811582692\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 59/100, Objective value: 0.45865910805029897\n",
      "Epoch 60/100, Objective value: 0.45847009098034297\n",
      "Epoch 61/100, Objective value: 0.45845006018473855\n",
      "Epoch 62/100, Objective value: 0.45834988547898947\n",
      "Epoch 63/100, Objective value: 0.45834215357867103\n",
      "Epoch 64/100, Objective value: 0.45843355262186086\n",
      "Epoch 65/100, Objective value: 0.45833608391959413\n",
      "Epoch 66/100, Objective value: 0.4583289394546279\n",
      "Epoch 67/100, Objective value: 0.4581591735702217\n",
      "Epoch 68/100, Objective value: 0.4581955391205252\n",
      "Epoch 69/100, Objective value: 0.45813213930826047\n",
      "Epoch 70/100, Objective value: 0.45826546921306094\n",
      "Epoch 71/100, Objective value: 0.4582943585216059\n",
      "Epoch 72/100, Objective value: 0.45805190364224585\n",
      "Epoch 73/100, Objective value: 0.45807715327229503\n",
      "Epoch 74/100, Objective value: 0.4581292359117125\n",
      "Epoch 75/100, Objective value: 0.45806897584259154\n",
      "Epoch 76/100, Objective value: 0.45825472967878744\n",
      "Epoch 77/100, Objective value: 0.4579625273543364\n",
      "Epoch 78/100, Objective value: 0.45808518168678514\n",
      "Epoch 79/100, Objective value: 0.4580419090334549\n",
      "Epoch 80/100, Objective value: 0.45809542242904466\n",
      "Epoch 81/100, Objective value: 0.4579094829261427\n",
      "Epoch 82/100, Objective value: 0.4579021125128665\n",
      "Epoch 83/100, Objective value: 0.4578819577070356\n",
      "Epoch 84/100, Objective value: 0.4578033857713826\n",
      "Epoch 85/100, Objective value: 0.45802203422961146\n",
      "Epoch 86/100, Objective value: 0.45789887818817504\n",
      "Epoch 87/100, Objective value: 0.45792434666840764\n",
      "Epoch 88/100, Objective value: 0.45794849247308517\n",
      "Epoch 89/100, Objective value: 0.4578805370523411\n",
      "Epoch 90/100, Objective value: 0.4578908279686612\n",
      "Epoch 91/100, Objective value: 0.4578383981127733\n",
      "Epoch 92/100, Objective value: 0.4578643341671699\n",
      "Epoch 93/100, Objective value: 0.4578243676947313\n",
      "Epoch 94/100, Objective value: 0.4578162497802875\n",
      "Epoch 95/100, Objective value: 0.45784618219885614\n",
      "Epoch 96/100, Objective value: 0.45810071930977647\n",
      "Epoch 97/100, Objective value: 0.4578969014167938\n",
      "Epoch 98/100, Objective value: 0.45773823055928153\n",
      "Epoch 99/100, Objective value: 0.457852947971058\n",
      "Epoch 100/100, Objective value: 0.45782997675042375\n"
     ]
    }
   ],
   "source": [
    "# MB-SGD with batch size b=64\n",
    "lam = 1E-6 # do not change\n",
    "b = 64 # do not change\n",
    "stepsize = 0.1 # you must tune this parameter\n",
    "\n",
    "# w, objvals_mbsgd64 = mb_sgd(x_train, y_train, lam, b, stepsize)\n",
    "\n",
    "best_stepsize = None\n",
    "best_objval = float('inf')\n",
    "best_w = None\n",
    "max_epoch = 100\n",
    "\n",
    "# Try different step sizes\n",
    "for stepsize in [0.01, 0.05, 0.1]:\n",
    "    print(f\"Testing stepsize: {stepsize}\")\n",
    "    w, objvals = mb_sgd(x_train, y_train, lam, b, stepsize, max_epoch)\n",
    "    final_objval = objvals[-1]\n",
    "    if final_objval < best_objval:\n",
    "        best_objval = final_objval\n",
    "        best_stepsize = stepsize\n",
    "        best_w = w\n",
    "\n",
    "print(f\"Best stepsize: {best_stepsize}, Best objective value: {best_objval}\")\n",
    "\n",
    "# Run the best step size again for final confirmation\n",
    "w, objvals_mbsgd64 = mb_sgd(x_train, y_train, lam, b, best_stepsize, max_epoch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EiZrAAuui_M_"
   },
   "source": [
    "Best stepsize: 0.05, Best objective value: 0.4578000800630667"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zT19_aI7WwuW"
   },
   "source": [
    "# 7. Plot and compare GD, SGD, and MB-SGD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "J1R5gdSHWwuW"
   },
   "source": [
    "You are required to compare the following algorithms:\n",
    "\n",
    "- Gradient descent (GD)\n",
    "\n",
    "- SGD\n",
    "\n",
    "- MB-SGD with b=8\n",
    "\n",
    "- MB-SGD with b=64\n",
    "\n",
    "Follow the code in Section 4 to plot ```objective function value``` against ```epochs```. There should be four curves in the plot; each curve corresponds to one algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Qd7t2ZOsWwuW"
   },
   "source": [
    "Hint: Logistic regression with $\\ell_2$-norm regularization is a strongly convex optimization problem. All the algorithms will converge to the same solution. **In the end, the ``objective function value`` of the 4 algorithms will be the same. If not the same, your implementation must be wrong. Do NOT submit wrong code and wrong result!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 407
    },
    "id": "m4Gux3ByWwuW",
    "outputId": "297a316e-3841-4b86-ef3a-b6cb5c5a0d3c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the 4 curves:\n",
    "# 1. objective function value against epochs for GD\n",
    "# 2. objective function value against epochs for SGD\n",
    "# 3. objective function value against epochs for MB-SGD with b=8\n",
    "# 4. objective function value against epochs for MB-SGD with b=64\n",
    "\n",
    "fig = plt.figure(figsize=(6, 4))\n",
    "\n",
    "epochs_gd = range(len(objvals_gd))\n",
    "epochs_sgd = range(len(objvals_sgd))\n",
    "epochs_mbsgd8 = range(len(objvals_mbsgd8))\n",
    "epochs_mbsgd64 = range(len(objvals_mbsgd64))\n",
    "\n",
    "line0, = plt.plot(epochs_gd, objvals_gd, '--b', linewidth=4)\n",
    "line1, = plt.plot(epochs_sgd, objvals_sgd, '-r', linewidth=2)\n",
    "line2, = plt.plot(epochs_mbsgd8, objvals_mbsgd8, '--g', linewidth=2)\n",
    "line3, = plt.plot(epochs_mbsgd64, objvals_mbsgd64, ':p', linewidth=2)\n",
    "plt.xlabel('Epochs', fontsize=20)\n",
    "plt.ylabel('Objective Value', fontsize=20)\n",
    "plt.xticks(fontsize=16)\n",
    "plt.yticks(fontsize=16)\n",
    "plt.legend([line0, line1, line2, line3], ['GD', 'SGD', 'MBSGB8', 'MBSGD64'], fontsize=20)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "fig.savefig('compare_gd_sgd.pdf', format='pdf', dpi=1200)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6RWljWbHWwuW"
   },
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
